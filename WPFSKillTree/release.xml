<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="4.0" DefaultTargets="Release" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- MSBuild file used by dist-*.bat scripts -->
    <Import Project="$(MSBuildProjectDirectory)\Tools\MSBuild.ExtensionPack.tasks" />

    <!-- Takes LocaleLanguageDir items and outputs same items with "Locale" metadata set to correct PO locale -->
    <UsingTask TaskName="PopulateLocale" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsTasksPath)">
        <ParameterGroup>
            <Dirs ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Locales ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                if (Dirs.Length > 0)
                {
                    Locales = new TaskItem[Dirs.Length];
                    for (int i = 0; i < Dirs.Length; i++)
                    {
                        ITaskItem item = Dirs[i];

                        string[] subtags = item.GetMetadata("Filename").Split('-');
                        string language = subtags[0];
                        string variant = subtags.Length > 1 && subtags[1].Length >= 3 ? subtags[1] : null;
                        string region = subtags.Length > 2 && subtags[2].Length == 2 ? subtags[2] : (subtags.Length > 1 && subtags[1].Length == 2 ? subtags[1] : null);

                        string locale = language.ToLowerInvariant();
                        if (region != null) locale += "_" + region.ToUpperInvariant();
                        if (variant != null) locale += "@" + variant.ToLowerInvariant();

                        Locales[i] = new TaskItem(item.ItemSpec);
                        item.CopyMetadataTo(Locales[i]);
                        Locales[i].SetMetadata("Locale", locale);
                    }
                }
]]>
            </Code>
        </Task>
    </UsingTask>

    <PropertyGroup>
        <WorkDir>$(MSBuildProjectDirectory)\dist</WorkDir>
        <ZipTool>Tools\7z.exe a -tzip</ZipTool>
        <ISCCTool>Tools\isetup\ISCC.exe</ISCCTool>
    </PropertyGroup>
    
    <PropertyGroup>
        <MSBuildToolsTasksPathOld>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MSBuildToolsTasksPathOld>
        <MSBuildToolsTasksPathNew>$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MSBuildToolsTasksPathNew>
        <MSBuildToolsTasksPath Condition="Exists('$(MSBuildToolsTasksPathOld)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MSBuildToolsTasksPath>
        <MSBuildToolsTasksPath Condition="Exists('$(MSBuildToolsTasksPathNew)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MSBuildToolsTasksPath>
    </PropertyGroup>

    <PropertyGroup>
        <DistDir>$(WorkDir)\PoESkillTree</DistDir>
        <TagFile>$(WorkDir)\tag</TagFile>
        <RevisionCountFile>$(WorkDir)\revcount</RevisionCountFile>
        <ObjDir>obj</ObjDir>
    </PropertyGroup>

    <PropertyGroup>
        <DefaultCatalogDir>en-US</DefaultCatalogDir>
        <LocaleXGettextKeywords>-kL10n.Message -kL10n.Message:1,2c -kL10n.Plural:1,2 -kL10n.Plural:1,2,4c</LocaleXGettextKeywords>
        <LocaleDir>Locale</LocaleDir>
        <LocaleMessageFilename>Messages.po</LocaleMessageFilename>
        <LocaleTemplateFilename>Messages.pot</LocaleTemplateFilename>
        <LocaleTemplateFile>$(LocaleDir)\$(LocaleTemplateFilename)</LocaleTemplateFile>
        <LocaleWorkDir>$(ObjDir)\$(LocaleDir)</LocaleWorkDir>
        <LocaleWorkTemplateFile>$(ObjDir)\$(LocaleDir)\$(LocaleTemplateFilename)</LocaleWorkTemplateFile>
    </PropertyGroup>

    <ItemGroup>
        <!-- All of these in one list produces too long command line arguments. This partition should be enough for a while. -->
        <CSFiles1 Include="Controls\**\*.cs" Exclude="$(ObjDir)\**" />
        <CSFiles2 Include="Model\**\*.cs" Exclude="$(ObjDir)\**" />
        <CSFiles3 Include="SkillTreeFiles\**\*.cs" Exclude="$(ObjDir)\**" />
        <CSFiles4 Include="TreeGenerator\**\*.cs" Exclude="$(ObjDir)\**" />
        <CSFiles5 Include="Utils\**\*.cs" Exclude="$(ObjDir)\**" />
        <CSFiles6 Include="**\*.cs" Exclude="$(ObjDir)\**;Controls\**\*.cs;Model\**\*.cs;SkillTreeFiles\**\*.cs;TreeGenerator\**\*.cs;Utils\**\*.cs" />
        <XAMLFile Include="**\*.xaml" Exclude="$(LocaleWorkDir)\**" />
        <LocaleLanguageDir Include="$([System.IO.Directory]::GetDirectories(&quot;$(LocaleDir)&quot;))" Exclude="$(LocaleDir)\$(DefaultCatalogDir)">
            <MessageFile>%(Identity)\$(LocaleMessageFilename)</MessageFile>
        </LocaleLanguageDir>
        <LocaleCopyFiles Include="$(LocaleDir)\**" />
    </ItemGroup>

    <PropertyGroup>
        <PortableIniLines>
[Setup]
Language=en_US
        </PortableIniLines>
        <PersistentDataLines>
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<PersistentData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <AppVersion>%AppVersion%</AppVersion>
  <Options>
    <Language>%LANGUAGE%</Language>
  </Options>
</PersistentData>
]]>
        </PersistentDataLines>
    </PropertyGroup>

    <Target Name="BuildLocale" DependsOnTargets="BuildLocaleCatalog">
        <!-- Don't make any dependencies on this target, it's invoked explicitely as Post-Build event -->
    </Target>

    <Target Name="TransformXAML">
        <!-- Make output directory for fake C# file -->
        <MakeDir Directories="@(XAMLFile->'$(LocaleWorkDir)\%(RecursiveDir)')" />

        <!-- Transform XAML file to fake C# file -->
        <Exec Command="Tools\XAMLText %(XAMLFile.Identity) $(LocaleWorkDir)\%(XAMLFile.RecursiveDir)%(XAMLFile.Filename)%(XAMLFile.Extension)" />
    </Target>

    <Target Name="BuildLocaleTemplate" DependsOnTargets="TransformXAML">
        <PropertyGroup>
            <LocaleXAMLFileList>@(XAMLFile->'%(RecursiveDir)%(Filename)%(Extension)', ' ')</LocaleXAMLFileList>
        </PropertyGroup>

        <!-- Extract messages from transformed XAML files -->
        <Exec Command="Tools\gettext\xgettext -L C# --from-code=UTF-8 --omit-header --no-wrap -k $(LocaleXGettextKeywords) -o $(LocaleWorkTemplateFile) -D $(LocaleWorkDir) $(LocaleXAMLFileList)" />

        <!-- Extract messages from source C# files -->
        <Exec Command="Tools\gettext\xgettext -L C# --from-code=UTF-8 --omit-header --no-wrap -k $(LocaleXGettextKeywords) -j -o $(LocaleWorkTemplateFile) @(CSFiles1, ' ')" />
        <Exec Command="Tools\gettext\xgettext -L C# --from-code=UTF-8 --omit-header --no-wrap -k $(LocaleXGettextKeywords) -j -o $(LocaleWorkTemplateFile) @(CSFiles2, ' ')" />
        <Exec Command="Tools\gettext\xgettext -L C# --from-code=UTF-8 --omit-header --no-wrap -k $(LocaleXGettextKeywords) -j -o $(LocaleWorkTemplateFile) @(CSFiles3, ' ')" />
        <Exec Command="Tools\gettext\xgettext -L C# --from-code=UTF-8 --omit-header --no-wrap -k $(LocaleXGettextKeywords) -j -o $(LocaleWorkTemplateFile) @(CSFiles4, ' ')" />
        <Exec Command="Tools\gettext\xgettext -L C# --from-code=UTF-8 --omit-header --no-wrap -k $(LocaleXGettextKeywords) -j -o $(LocaleWorkTemplateFile) @(CSFiles5, ' ')" />
        <Exec Command="Tools\gettext\xgettext -L C# --from-code=UTF-8 --omit-header --no-wrap -k $(LocaleXGettextKeywords) -j -o $(LocaleWorkTemplateFile) @(CSFiles6, ' ')" />

        <!-- Remove BOM from template messages -->
        <Exec Command="Tools\DeBOM $(LocaleWorkTemplateFile)" />
        <!-- Merge extracted messages into template messages -->
        <Exec Command="Tools\gettext\msgmerge -U --backup=none --no-wrap $(LocaleTemplateFile) $(LocaleWorkTemplateFile)" />
    </Target>

    <Target Name="BuildLocalePopulateLocales" DependsOnTargets="BuildLocaleTemplate">
        <PopulateLocale Dirs="@(LocaleLanguageDir)">
            <Output ItemName="LocaleLocales" TaskParameter="Locales" />
        </PopulateLocale>
    </Target>
    
    <Target Name="BuildLocaleCatalog" DependsOnTargets="BuildLocalePopulateLocales">
        <!-- Remove BOM from catalog messages -->
        <Exec Command="Tools\DeBOM %(LocaleLocales.MessageFile)"
              Condition="Exists('%(LocaleLocales.MessageFile)')" />

        <!-- Merge template messages into catalog messages -->
        <Exec Command="Tools\gettext\msgmerge -U --backup=none --no-wrap %(LocaleLocales.MessageFile) $(LocaleTemplateFile)"
              Condition="Exists('%(LocaleLocales.MessageFile)')" />

        <!-- Create catalog messages -->
        <Exec Command="Locale\msginit -i $(LocaleTemplateFile) -o %(LocaleLocales.MessageFile) -l %(LocaleLocales.Locale) --no-wrap --no-translator"
              Condition="!Exists('%(LocaleLocales.MessageFile)')" />
    </Target>

    <Target Name="Clean">
        <Exec Command="dotnet clean -c release -o $(DistDir)" />
        <RemoveDir Directories="$(LocaleWorkDir)" />
        <RemoveDir Directories="$(WorkDir)" />
    </Target>

    <!-- Target fetches all properties used to identify application and release -->
    <Target Name="Identity">
        <!-- Get properties from WPFSKillTree project file -->
        <XmlPeek XmlInputPath="WPFSKillTree.csproj" Query="//Project/PropertyGroup/AssemblyName/text()">
          <Output PropertyName="AssemblyName" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="WPFSKillTree.csproj" Query="//Project/PropertyGroup/Company/text()">
          <Output PropertyName="Company" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="WPFSKillTree.csproj" Query="//Project/PropertyGroup/Copyright/text()">
          <Output PropertyName="Copyright" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="WPFSKillTree.csproj" Query="//Project/PropertyGroup/Product/text()">
          <Output PropertyName="ProductName" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="WPFSKillTree.csproj" Query="//Project/PropertyGroup/ProductUrl/text()">
          <Output PropertyName="ProductUrl" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="WPFSKillTree.csproj" Query="//Project/PropertyGroup/VersionPrefix/text()">
          <Output PropertyName="VersionPrefix" TaskParameter="Result" />
        </XmlPeek>
        <XmlPeek XmlInputPath="WPFSKillTree.csproj" Query="//Project/PropertyGroup/VersionSuffix/text()">
          <Output PropertyName="VersionSuffix" TaskParameter="Result" />
        </XmlPeek>

        <PropertyGroup>
          <Version Condition=" '$(VersionSuffix)' != '' ">$(VersionPrefix)-$(VersionSuffix)</Version>
          <Version Condition=" '$(Version)' == '' ">$(VersionPrefix)</Version>
        </PropertyGroup>

        <!-- Create working directory for temporary files -->
        <MakeDir Directories="$(WorkDir)" />

        <!-- Create FileVersion from VersionPrefix using Git revision count as build number -->
        <Exec Command="git rev-list --count HEAD >$(RevisionCountFile)" />
        <ReadLinesFromFile File="$(RevisionCountFile)">
            <Output PropertyName="BuildNumber" TaskParameter="Lines" />
        </ReadLinesFromFile>
        <Message Text="%09Revision count: $(BuildNumber)" />
        <PropertyGroup>
            <FileVersion>$(VersionPrefix).$(BuildNumber)</FileVersion>
        </PropertyGroup>
    </Target>

    <Target Name="Release" DependsOnTargets="Clean;Identity">
        <!-- Compare Version with recent Git tag (version) -->
        <Exec Command="git describe --tags --abbrev=0 >$(TagFile)" />
        <ReadLinesFromFile File="$(TagFile)">
            <Output PropertyName="GitVersion" TaskParameter="Lines" />
        </ReadLinesFromFile>
        <Message Text="%09Release version: $(Version)" />
        <Message Text="%09Recent Git version: $(GitVersion)" />
        <Error Text="Release version and recent Git version are identical!%0APlease, edit VersionPrefix/-Suffix of WPFSKillTree.csproj file to reflect a new release."
               Condition="'$(Version)' == '$(GitVersion)'" />

        <!-- Generate app.manifest -->
        <GenerateApplicationManifest ManifestType="Native" InputManifest="Properties\app.manifest.i" OutputManifest="Properties\app.manifest"
                                     AssemblyName="$(AssemblyName).exe" AssemblyVersion="$(VersionPrefix).0" />

        <Exec Command="dotnet test -c release ..\WPFSKillTree.sln" />
        <Exec Command="dotnet publish -c release -o $(DistDir) /p:FileVersion=$(FileVersion)" />
        <Exec Command="dotnet run -c release -p ..\UpdateDB /SpecifiedDir:$(DistDir)" />

        <PropertyGroup>
          <ArtifactFileName>$(ProductName.Replace(" ", ""))-$(Version)</ArtifactFileName>
        </PropertyGroup>

        <!-- Create release installer -->
        <WriteLinesToFile File="$(DistDir)\PersistentData.xml" Lines="$(PersistentDataLines.Replace(&quot;%AppVersion%&quot;, $(FileVersion)))" Overwrite="true" />
        <Exec Command="..\$(ISCCTool) /dCompany=&quot;$(Company)&quot; /dCopyright=&quot;$(Copyright)&quot; /dAssemblyName=&quot;$(AssemblyName)&quot; /dFileVersion=&quot;$(FileVersion)&quot; /dArtifactFileName=&quot;$(ArtifactFileName)&quot; /dProductName=&quot;$(ProductName)&quot; /dProductURL=&quot;$(ProductURL)&quot; /dVersion=$(Version) /dProjectDir=&quot;$(MSBuildProjectDirectory)&quot; ..\release.iss" WorkingDirectory="$(WorkDir)" />

        <!-- Create release zip package -->
        <Delete Files="$(DistDir)\PersistentData.xml" />
        <WriteLinesToFile File="$(DistDir)\Portable.ini" Lines="$(PortableIniLines)" Overwrite="true" />
        <Exec Command="..\$(ZipTool) $(ArtifactFileName).zip $(DistDir)" WorkingDirectory="$(WorkDir)" />
    </Target>
</Project>
